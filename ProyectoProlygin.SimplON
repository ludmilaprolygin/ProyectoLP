% Class Records
% CR de la clase A
    % CR de totalItemsCreados
    SetLabel CRAtotalItems, Libre
    SetD Libre, 0                                 @totalItemsCreados=0
    SetLibre Libre+1
    SetActual Libre

    %CR de limiteProcesamiento
    SetLabel CRAlimiteProcesamiento, Libre
    SetD Libre, 100                               @limiteProcesamiento=100
    SetLibre Libre+1
    SetActual Libre

% Virtual Tables
    % VT de la clase A
    SetLabel VTA, Libre
    SetD Libre, procesarLoteA                     @VT_A: direccion procesarLote() - A           
    SetD Libre+1, obtenerInformacionA             @VT_A: direccion obtenerInformacion(int tipoInfo) - A
    SetD Libre+2, obtenerValorUnitarioA           @VT_A: direccion obtenerValorUnitario() - A
    SetD Libre+3, verificarStockA                 @VT_A: direccion verificarStock() - A
    SetLibre Libre+4                              
    SetActual Libre

    % VT de la clase B
    SetLabel VTB, Libre
    SetD Libre, procesarLoteB                     @VT_B: direccion procesarLote() - B
    SetD Libre+1, obtenerInformacionB             @VT_B: direccion obtenerInformacion(int tipoInfo) - B
    SetD Libre+2, obtenerValorUnitarioB           @VT_B: direccion obtenerValorUnitario() - B
    SetD Libre+3, verificarStockA                 @VT_B: direccion verificarStock() - A
    SetD Libre+4, manejarPedido1B                 @VT_B: direccion manejarPedido(int cantidadSolicitada) - B
    SetD Libre+5, manejarPedido2B                 @VT_B: direccion manejarPedido(int cantidadSolicitada, int prioridad) - B
    SetD Libre+6, VTA                             @VT_B: direccion de VT_A
    SetLibre Libre+7
    SetActual Libre 

    % VT de la clase C
    SetLabel VTC, Libre
    SetD Libre, procesarLoteB                     @VT_C: direccion procesarLote() - B
    SetD Libre+1, obtenerInformacionB             @VT_C: direccion obtenerInformacion(int tipoInfo) - B
    SetD Libre+2, obtenerValorUnitarioB           @VT_C: direccion obtenerValorUnitario() - B
    SetD Libre+3, verificarStockA                 @VT_C: direccion verificarStock() - A
    SetD Libre+4, manejarPedido1B                 @VT_C: direccion manejarPedido(int cantidadSolicitada) - B
    SetD Libre+5, manejarPedido2B                 @VT_C: direccion manejarPedido(int cantidadSolicitada, int prioridad) - B
    SetD Libre+5, inicializarProductoPrincipalC   @VT_C: direccion inicializarProductoPrincipal() - C
    SetD Libre+6, cumplirOrdenComplejaC           @VT_C: direccion cumplirOrdenCompleja(int cantidadNecesaria) - C
    SetD Libre+7, VTB                             @VT_C: direccion de VT_B
    SetLibre Libre+8
    SetActual Libre

% Invocacion a main
    SetD Libre, PC+5                              
    SetD Libre+1, Actual                          
    SetActual Libre
    SetLibre Actual+5                             % Seteo Libre segun el tamanio del RA de main. No tiene puntero de retorno ni enlace dinamico, es un tipo especial
    Jump main
    Halt

% Traduccion generica para volver al llamador
llamador
    SetLibre Actual
    SetActual D[Actual+1]   % Muevo actual a donde tenia el enlace dinamico 
    Jump D[Libre]  

% Traduccion de auxiliares de uso general
mod
    SetD Actual-1, D[Actual+2] - ((D[Actual+2] / D[Actual+3]) * D[Actual+3])  
    Jump llamador

% Traduccion de las clases
    % Traduccion de la clase A
        % Constructor de la clase A
constructorA 
    SetH PO, VTA                            @VTA
    SetD CRAtotalItems, D[CRAtotalItems]+1  @totalItemsCreados++
    SetH PO+1, D[CRAtotalItems]*100         @id = totalItemsCreados * 100
    SetH PO+2, 50                           @cantidadDisponible = 50
    SetH PO+3, 10                           @valorUnitario = 10
    SetPO PO+4                              @Corro PO segun atributos declarados en la clase A + la VT
    Jump llamador

        % Metodos de la clase A
procesarLoteA 
    SetD Actual+3, 0            @itemsProcesados=0
    SetD Actual+4, 0            @i=0
    SetLibre Libre+1            @Lugar retorno % Como verificarStock devuelve algo, hago el huequito
    SetD Libre, PC+6            @PTR
    SetD Libre+1, Actual        @ED
    SetD Libre+2, D[Actual+2]   @This
    SetActual Libre
    SetLibre Actual+3           % Seteo Libre segun el tamanio del RA de verificarStock
    Jump D[H[D[Actual+2]]+3]    % Salto al codigo de verificarStock segun la VT del objeto receptor              
    SetD Actual+5, D[Libre-1]   @Retorno de verificarStock % Guardo en Actual+5 porque hay esta la variable stock. Ademas, saco de Libre-1 porque hay verificarStock me guardo el resultado
    condicionBucleProcesarLoteA
        JumpT finBucleProcesarLoteA, !((D[Actual+4] < H[D[Actual+2]+2]) & (D[Actual+5] >= 0)) @!(i < cantidadDisponible & stock >= 0) % Condicion de salida del bucle
    inicioBucleProcesarLoteA
        SetD Actual+3, D[Actual+3] + (D[Actual+4] - ((D[Actual + 4] / 5) * 5)) + 1 @itemsProcesados += (i mod 5) + 1
        JumpT PC+3, !(D[Actual+3] > CRAlimiteProcesamiento) % Si se supera el limite de procesamiento, salto
        SetD Actual+4, D[Actual+4] + 1 @i = i+1
        Jump condicionBucleProcesarLoteA % Salto al chequeo de la condicion de salida del bucle
    finBucleProcesarLoteA
    SetH D[Actual+2]+2, H[D[Actual+2]+2] - (D[Actual+3] / 2) @cantidadDisponible = cantidadDisponible - (itemsProcesados / 2)
    JumpT PC+2, !(H[D[Actual+2]+2] < 0)
    SetH D[Actual+2]+2, 0 @cantidadDisponible = 0
    SetD Actual-1, D[Actual+3]  @Retorno de procesarLoteA % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump llamador

obtenerInformacionA 
    JumpT PC+2, D[Actual+3] == 1 % Si tipoInfo==1, salto
    SetD Actual-1, (H[D[Actual+2]+3] * H[D[Actual+2]+2]) + Actual+3   @Retorno de obtenerInformacionA para tipoInfo != 1 % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump PC+1
    SetD Actual-1, H[D[Actual+2]+1]                                   @Retorno de obtenerInformacionA para tipoInfo == 1 % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump llamador

obtenerValorUnitarioA 
    SetD Actual-1, H[D[Actual+2]+3]                                   @Retorno de obtenerValorUnitarioA % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump llamador

verificarStockA 
    JumpT PC+4, ((H[D[Actual+2]+2] > 20) & (H[D[Actual+2]+3] > 5)) % Si cantidadDisponible > 20 && valorUnitario > 5, salto
    JumpT PC+5, ((H[D[Actual+2]+2] <= 20) | (H[D[Actual+2]+2] > 0)) % Si cantidadDisponible <= 20 || cantidadDisponible > 0, salto
    SetD Actual-1, -1  @Retorno de verificarStockA para caso default % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump PC+4
    SetD Actual-1, 1   @Retorno de verificarStockA para cantidadDisponible > 20 && valorUnitario > 5 % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump PC+2
    SetD Actual-1, 0   @Retorno de verificarStockA para cantidadDisponible <= 20 || cantidadDisponible > 0 % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
    Jump llamador

    % Traduccion de la clase B
        % Constructor de la clase B
constructorB
    SetD Libre, PC+5           @PTR
    SetD Libre+1, Actual       @ED
    SetActual Libre
    SetLibre Actual+2          % Seteo Libre segun el tamanio del RA de constructorA
    Jump constructorA          % super()
    SetPO PO-4                 @Corro PO segun atributos de clase B + la VT
    SetH PO, VTB               @VTB
    SetH PO+4, 1000 + H[PO+1]  @ubicacionAlmacen = 1000 + itemId
    SetH PO+5, (H[PO+2] - ((H[PO+2] / 2) * 2)) + 1   @tipoProducto = (itemId mod 2) + 1
    SetPO PO+6                 @Corro PO segun INST_B
    Jump llamador

        % Metodos de la clase B
procesarLoteB
    SetLibre Libre+1            @Lugar retorno % Como procesarLoteA devuelve algo, hago el huequito
    SetD Libre, PC+6            @PTR
    SetD Libre+1, Actual        @ED
    SetD Libre+2, D[Actual+2]   @this
    SetActual Libre
    SetLibre Actual+5           % Seteo Libre segun el tamanio del RA de procesarLoteA
    Jump procesarLoteA          % super.procesarLote()
    SetD Actual+3, D[Libre-1]   @resultadoBase = super.procesarLote()
    SetD Actual+4, 0            @ajuste = 0
    switchProcesarLoteB
        JumpT case1ProcesarLoteB, H[D[Actual+2]+5] == 1 % case 1
        JumpT case2ProcesarLoteB, H[D[Actual+2]+5] == 2 % case 2
        SetD Actual+4, D[Actual+3]           @ajuste = resultadoBase
        Jump finSwitchProcesarLoteB
        case1ProcesarLoteB
            SetD Actual+4, (D[Actual+3] / 2) @ajuste = resultadoBase / 2
            Jump finSwitchProcesarLoteB
        case2ProcesarLoteB
            SetD Actual+4, (D[Actual+3] * 2) @ajuste = resultadoBase * 2
            Jump finSwitchProcesarLoteB
    finSwitchProcesarLoteB
        SetH D[Actual+2]+2, H[D[Actual+2]+2] - (D[Actual+4] / 5) @cantidadDisponible = cantidadDisponible - (ajuste / 5);
        SetD Actual-1, D[Actual+3] + D[Actual+4] @Retorno de procesarLoteB % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
        Jump llamador

manejarPedido1B
    JumpT cantSolicitadaNegativa, D[Actual+3] <= 0 % Si cantidadSolicitada <= 0, salto
    JumpT cantDisponibleSuficiente, D[Actual+3] <= H[D[Actual+2]+2] % Si cantidadSolicitada <= cantidadDisponible, salto
    SetD Actual-1, -1 @Retorno de caso default
    Jump llamador
    cantSolicitadaNegativa
        SetD Actual-1, 0 @Retorno de caso cantidadSolicitada <= 0
        Jump llamador
    cantDisponibleSuficiente
        SetH D[Actual+2]+2, H[D[Actual+2]+2] - D[Actual+3] @cantidadDisponible = cantidadDisponible - cantidadSolicitada
        SetD Actual-1, D[Actual+3] * H[D[Actual+2]+3]      @Retorno de caso cantidadSolicitada <= cantidadDisponible % Guardo en Actual-1 porque como devuelvo un resultado, dejo un huequito
        Jump llamador

manejarPedido2B
    SetLibre Libre+1            @Lugar retorno % Como manejarPedido1B devuelve algo, hago el huequito
    SetD Libre, PC+6            @PTR
    SetD Libre+1, Actual        @ED
    SetD Libre+2, D[Actual+2]   @this
    SetActual Libre
    SetLibre Actual+5           % Seteo Libre segun el tamanio del RA de procesarLoteA
    Jump D[H[D[Actual+2]]+4]    % Salto al codigo de manejarPedido1B segun la VT del objeto receptor
    SetD Actual+5, D[Libre-1]   @costo = this.manejarPedido(cantidadSolicitada);
    JumpT PC+3, D[Actual+5] > 0 & D[Actual+4] > 5 % Si costo > 0 && prioridad > 5, salto
    SetD Actual-1, D[Actual+5]   @Retorno si !(costo > 0 && prioridad > 5)
    Jump llamador
    SetD Actual-1, D[Actual+5] + (D[Actual+5] / 10) @Retorno si costo > 0 && prioridad > 5
    Jump llamador

obtenerInformacionB
    JumpT tipoInfo1, D[Actual+3] == 1 % super.obtenerInformacion(tipoInfo) si tipoInfo==1
    SetD Actual-1, (H[D[Actual+2]+5] * H[D[Actual+2]+3]) + D[Actual+3] @tipoProducto * valorUnitario + tipoInfo
    Jump llamador
    tipoInfo1
        SetLibre Libre+1            @Lugar retorno % Como obtenerInformacionA devuelve algo, hago el huequito
        SetD Libre, PC+6            @PTR   
        SetD Libre+1, Actual        @ED
        SetD Libre+2, D[Actual+2]   @this
        SetActual Libre
        SetLibre Actual+4           % Seteo Libre segun el tamanio del RA de obtenerInformacionA
        Jump obtenerInformacionA
        SetD Actual-1, D[Libre-1] + H[D[Actual+2]+4] @Retorno de super.obtenerInformacion(tipoInfo)
        Jump llamador

obtenerValorUnitarioB
    SetLibre Libre+1            @Lugar retorno % Como obtenerValorUnitarioA devuelve algo, hago el huequito
    SetD Libre, PC+6            @PTR   
    SetD Libre+1, Actual        @ED
    SetD Libre+2, D[Actual+2]   @this
    SetActual Libre
    SetLibre Actual+3           % Seteo Libre segun el tamanio del RA de obtenerValorUnitarioA
    Jump obtenerValorUnitarioA
    SetD Actual-1, D[Libre-1] + (H[D[Actual+2]+5] * 2) @Retorno de obtenerValorUnitario()
    Jump llamador

    % Traduccion de la clase C
        % Constructor de la clase C
constructorC
    SetD Libre, PC+5           @PTR
    SetD Libre+1, Actual       @ED
    SetActual Libre
    SetLibre Actual+2          % Seteo Libre segun el tamanio del RA de constructorB
    Jump constructorB
    SetPO PO-6                 @Corro PO segun atributos de clase C + la VT
    SetH PO, VTC               @VTC
    SetH PO+7, D[Actual+2]     @numeroOrden = ordenId
    SetD Libre, PC+7           @PTR
    SetD Libre+1, Actual       @ED
    SetD Libre+2, PO           @this = gestorPrincipal
    SetPO PO+8                 @Corro PO segun INST_C
    SetActual Libre
    SetLibre Actual+3  
    Jump inicializarProductoPrincipalC
    Jump llamador

        % Metodos de la clase C
inicializarProductoPrincipalC
    SetD Actual+2, PO   @productoPrincipal
    SetD Libre, PC+5    @PTR
    SetD Libre+1, Actual    @ED
    SetActual Libre
    SetLibre Actual+2           % Seteo Libre segun el tamanio del RA de constructorB
    Jump constructorB
    Jump llamador

cumplirOrdenComplejaC
    SetD Actual+4, D[Actual+3]  @itemsFaltantes=cantidadNecesaria
    SetD Actual+5, 0    @vecesProcesado=0
    SetD Actual+6, 0    @costoTotal=0
    inicioBucleCumplirOrdenComplejaC
        SetLibre Libre+1                  @Lugar retorno % Como menejarPedido devuelve algo, hago el huequito
        SetD Libre, PC+7                  @PTR
        SetD Libre+1, Actual              @ED
        SetD Libre+2, H[D[Actual+2]+6]    @this = productoPrincipal
        SetD Libre+3, D[Actual+4]/2       @cantidadSolicitada = itemsFaltantes/2
        SetActual Libre
        SetLibre Actual+5                 % Seteo Libre segun el tamanio del RA de manejarPedido1B
        Jump D[H[D[Actual+2]]+4]          % Salto al codigo de manejarPedido1B segun la VT del objeto receptor
        SetD Actual+7, D[Libre-1]         @procesadoAhora = productoPrincipal.manejarPedido(itemsFaltantes/2);
        JumpT procesadoAhoraMenosUno, D[Actual+7] == -1 % Si procesadoAhora==-1, salto
        JumpT procesadoAhoraPositivo, D[Actual+7] > 0   % Si procesadoAhora>0, salto
        Jump finBucleCumplirOrdenComplejaC
    
        procesadoAhoraMenosUno
            SetLibre Libre+1                  @Lugar retorno % Como menejarPedido devuelve algo, hago el huequito
            SetD Libre, PC+7                  @PTR
            SetD Libre+1, Actual              @ED
            SetD Libre+2, H[D[Actual+2]+6]    @this = productoPrincipal
            SetD Libre+3, D[Actual+4]         @cantidadSolicitada = itemsFaltantes
            SetActual Libre
            SetLibre Actual+5                 % Seteo Libre segun el tamanio del RA de manejarPedido1B
            Jump D[H[D[Actual+2]]+4]          % Salto al codigo de manejarPedido1B segun la VT del objeto receptor
            SetD Actual+7, D[Libre-1]         @procesadoAhora = productoPrincipal.manejarPedido(itemsFaltantes);
            SetD Actual+5, D[Actual+5]+1      @vecesProcesados++
            JumpT inicioBucleCumplirOrdenComplejaC, D[Actual+4] > 0 & D[Actual+5] < 5 % Si itemsFaltantes > 0 y vecesProcesado < 5
            Jump finBucleCumplirOrdenComplejaC
        procesadoAhoraPositivo
            SetD Actual+6, D[Actual+6] + D[Actual+7]  @costoTotal = costoTotal + procesadoAhora
            SetLibre Libre+1                  @Lugar retorno % Como menejarPedido devuelve algo, hago el huequito
            SetD Libre, PC+6                  @PTR
            SetD Libre+1, Actual              @ED
            SetD Libre+2, H[D[Actual+2]+6]    @this = productoPrincipal
            SetActual Libre
            SetLibre Actual+5                 % Seteo Libre segun el tamanio del RA de manejarPedido1B
            Jump D[H[D[Actual+2]]+2]          % Salto al codigo de obtenerValorUnitario segun la VT del objeto receptor
            SetD Actual+4, D[Actual+4] - (D[Actual+7] / D[Libre-1]) @itemsFaltantes -= (procesadoAhora / valorUnitario)
            SetD Actual+5, D[Actual+5]+1      @vecesProcesados++
            JumpT inicioBucleCumplirOrdenComplejaC, D[Actual+4] > 0 & D[Actual+5] < 5 % Si itemsFaltantes > 0 y vecesProcesado < 5
            Jump finBucleCumplirOrdenComplejaC
    
    finBucleCumplirOrdenComplejaC
        JumpT PC+3, D[Actual+4]>0 % Si itemsFaltantes > 0, salto
        SetD Actual-1, D[Actual+6] * (-1) @Retorno -costoTotal
        Jump llamador
        SetD Actual-1, D[Actual+6]  @Retorno costoTotal
        Jump llamador

    % Traduccion de la clase Principal
        % Metodo main
main
    SetIn Actual+2             @solicitudInicial = Sistema.read(); 
    SetIn Actual+3             @prioridadOrden = Sistema.read();
    SetD Actual+4, PO          @gestorPrincipal
    SetD Libre, PC+6           @PTR
    SetD Libre+1, Actual       @ED
    SetD Libre+2, 100          @ordenId
    SetActual Libre
    SetLibre Actual+3          % Seteo Libre segun el tamanio del RA de constructorC
    Jump constructorC
    print1
        SetLibre Libre+1           @Lugar retorno % Como obtenerInformacion devuelve algo, hago el huequito
        SetD Libre, PC+7           @PTR
        SetD Libre+1, Actual       @ED
        SetD Libre+2, D[Actual+4]  @this
        SetD Libre+3, D[Actual+3]  @tipoInfo
        SetActual Libre
        SetLibre Actual+4          % Seteo Libre segun el tamanio del RA de obtenerInformacionB
        Jump D[H[D[Actual+2]]+1]   % Salto al codigo de obtenerInformacion segun la VT del objeto receptor
        SetOut D[Libre-1]          @Salida de obtenerInformacion
    print2
        SetLibre Libre+1           @Lugar retorno % Como procesarLote devuelve algo, hago el huequito
        SetD Libre, PC+6           @PTR
        SetD Libre+1, Actual       @ED
        SetD Libre+2, D[Actual+4]  @this
        SetActual Libre
        SetLibre Actual+5          % Seteo Libre segun el tamanio del RA de procesarLote
        Jump D[H[D[Actual+2]]]     % Salto al codigo de procesarLote segun la VT del objeto receptor
        SetOut D[Libre-1]          @Salida de procesarLote
    print3
        SetLibre Libre+1           @Lugar retorno % Como cumplirOrdenCompleja devuelve algo, hago el huequito
        SetD Libre, PC+7           @PTR
        SetD Libre+1, Actual       @ED
        SetD Libre+2, D[Actual+4]  @this
        SetD Libre+3,  D[Actual+2] * D[Actual+2] * D[Actual+3]   @tipoInfo
        SetActual Libre
        SetLibre Actual+8          % Seteo Libre segun el tamanio del RA de cumplirOrdenCompleja
        Jump D[H[D[Actual+2]]]     % Salto al codigo de cumplirOrdenCompleja segun la VT del objeto receptor
        SetOut D[Libre-1]          @Salida de cumplirOrdenCompleja
    Jump llamador